AWSTemplateFormatVersion: '2010-09-09'
Description: pihole (using Quad9 DNS)/pivpn (Wireguard setup) ready to use stack

Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  AMIID:
    Type: String
    Default: ami-0c1c30571d2dae5c9
  KMSID:
    Type: String
  WGPort:
    Type: Number
    Default: 51820

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - Label: 
          default: "Network Configuration"
        Parameters: 
          - VPCID
          - SubnetId
      - Label: 
          default: "EC2 Configuration"
        Parameters:
          - AMIID 
          - KMSID
      - Label: 
          default: "PiVPN Configuration"
        Parameters:
          - WGPort
    ParameterLabels:
      VPCID:
        default: VPC
      SubnetId:
        default: Subnet
      AMIID:
        default: AMI id for the image you want to use (e.g. Ubuntu ami-0c1c30571d2dae5c9). 
      KMSID:
        default: "KMS id used to encrypt filesystem (KMS > AWS managed keys, default aws/ebs Key ID is fine)"
      WGPort:
        default: "Choose Wireguard listen port"

Resources:
  WireguardElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Tags: 
        - Key: Name
          Value: pivpn-pihole
  WireguardSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: pivpn-pihole-sg
      GroupDescription: Security group for WireguardNetworkInterface
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: !Sub "${WGPort}"
          ToPort: !Sub "${WGPort}"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: pivpn-pihole
      VpcId: !Sub "${VPCID}"
  WireguardNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SourceDestCheck: False
      GroupSet:
        - !Ref WireguardSecurityGroup
      SubnetId: !Sub "${SubnetId}"
      Tags:
      - Key: Name
        Value: pivpn-pihole
  WireguardElasticIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt WireguardElasticIP.AllocationId
      NetworkInterfaceId: !Ref WireguardNetworkInterface
  EC2SSMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: pivpn-pihole-ec2-ssm-role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
      - Key: Name
        Value: pivpn-pihole
  EC2SSMProfile:
  Type: "AWS::IAM::InstanceProfile"
  Properties: 
    Path: /
    Roles: 
      - !Ref EC2SSMRole
  WireguardInstance:
    Type: AWS::EC2::Instance
    DependsOn: WireguardElasticIPAssociation
    Properties: 
      ImageId: !Sub "${AMIID}"
      InstanceType: t2.micro
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref WireguardNetworkInterface
          DeviceIndex: 0
      HibernationOptions:
        Configured: True
      BlockDeviceMappings: 
        - DeviceName: "/dev/sda1"
          Ebs: 
            Encrypted: True
            DeleteOnTermination: True
            KmsKeyId: !Sub "${KMSID}"
            VolumeType: gp2
            VolumeSize: 8
      IamInstanceProfile: !Ref EC2SSMProfile
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            mkdir -p /etc/pihole
            touch /etc/pihole/setupVars.conf
            cat <<EOT >> /etc/pihole/setupVars.conf
            PIHOLE_INTERFACE=eth0
            PIHOLE_DNS_1=9.9.9.9
            PIHOLE_DNS_2=149.112.112.112
            QUERY_LOGGING=true
            INSTALL_WEB_SERVER=false
            INSTALL_WEB_INTERFACE=false
            LIGHTTPD_ENABLED=false
            CACHE_SIZE=10000
            DNS_FQDN_REQUIRED=true
            DNS_BOGUS_PRIV=true
            DNSMASQ_LISTENING=local
            EOT
            curl -L https://install.pi-hole.net | bash /dev/stdin --unattended
            
            touch pivpn.conf
            cat <<EOT >> pivpn.conf
            USING_UFW=0
            pivpnforceipv6route=1
            IPv4dev=eth0
            install_user=ubuntu
            install_home=/home/ubuntu
            VPN=wireguard
            pivpnPORT=${WGPort}
            pivpnHOST=${WireguardElasticIP.PublicIp}
            INPUT_CHAIN_EDITED=1
            FORWARD_CHAIN_EDITED=0
            INPUT_CHAIN_EDITEDv6=
            FORWARD_CHAIN_EDITEDv6=
            pivpnPROTO=udp
            pivpnMTU=1420
            pivpnDEV=wg0
            pivpnenableipv6=0
            ALLOWED_IPS="0.0.0.0/0, ::0/0"
            UNATTUPG=1
            INSTALLED_PACKAGES=(dnsutils grepcidr net-tools bsdmainutils iptables-persistent wireguard-tools qrencode)
            EOT
            
            mkdir -p /usr/local/src/pivpn
            curl -L https://install.pivpn.io | bash /dev/stdin --unattended pivpn.conf

            pivpnNET=$(cat /etc/pivpn/wireguard/setupVars.conf | grep pivpnNET | sed -E 's/(pivpnNET=)(.+)/\2/g')
            pivpnDNS1=$(echo $pivpnNET | sed -E 's/([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)([0-9]{1,3})/\11/g')
            sed -i -E "s/(pivpnDNS1=).+/\1$pivpnDNS1/g" /etc/pivpn/wireguard/setupVars.conf
            sed -i -E "s/(pivpnDNS2=).+/\1/g" /etc/pivpn/wireguard/setupVars.conf

      Tags:
      - Key: Name
        Value: pivpn-pihole
